name: UIE_M2 - Projet churn finance with CI/CD deploy

env:
  DOCKER_USER: ${{secrets.USER_NAME}}
  DOCKER_PASSWORD: ${{secrets.PASSWORD}}
  # DOCKER_REPO_NAME: ${{secrets.REPOSITORY_DOCKER_HUB}}
  DOCKER_REPO_NAME_BACK: ${{secrets.REPOSITORY_DOCKER_HUB_BACK}}
  DOCKER_REPO_NAME_FRONT: ${{secrets.REPOSITORY_DOCKER_HUB_FRONT}}
  MON_TEST: ${{secrets.MON_TEST_PWD}}

# conditions exécution du Jobs pour la partie intégration continue CI
on:
  push:
    branches:
      - main
      - experimentation
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest #systeme d'exploitation ainstaller sur docker
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4 #recupere le projet gitlab action

      - name: Set up Docker Build
        uses: docker/setup-buildx-action@v3

      # # Docker image pour la collect de données
      # - name: Build Docker Image for data collect
      #   run: docker build -t churn_finance_g2_collect -f Dockerfile-collect .

      # Docker image pour la collect et le pretraitement de données
      - name: Build Docker Image for data preprocessing
        run: docker build -t churn_finance_g2_c_p_m -f Dockerfile-c-pt-m .

      # Docker image back
      - name: Build Docker Image back
        run: docker build -t churn_finance_g2_back -f Dockerfile-back .

      # Docker image front
      - name: Build Docker Image front
        run: docker build -t churn_finance_g2_front -f Dockerfile-web .

      # Lister les images
      - name: List of Docker images
        run: docker image ls

      # # Lancer le conteneur docker pour la collect
      # - name: Run Docker Container for collect
      #   run: docker run -d -p 4000:4000 churn_finance_g2_collect

      # Lancer le conteneur docker
      - name: Run Docker Container for collect pretraining and modeling
        run: docker run -d -p 4000:4000 churn_finance_g2_c_p_m

      # Lancer le conteneur docker pour la collect
      - name: Run Docker Container for back
        run: docker run -d -p 5000:5000 churn_finance_g2_back

      # Lancer le conteneur docker pour la collect
      - name: Run Docker Container for front
        run: docker run -d -p 8501:8501 churn_finance_g2_front

      # Lister les conteneur
      - name: List of Docker containers
        run: docker ps -a

      # Filtrer l'ID des conteneurs pour les images suivantes
      - name: List of Docker -q AFTER
        run: |
          docker ps --filter "ancestor=churn_finance_g2_c_p_m" --filter "ancestor=churn_finance_g2_back" --filter "ancestor=churn_finance_g2_front" -q

      # Me connecter sur dockerHub
      - name: Docker login
        run: | # log into docker hub account
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
      
      # Recuperer la date et l'heure aujourd'hui
      - name: Get current date # get the date of the build
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      # Builder l'image du back
      - name: Build the Docker image BACK # push The image to the docker hub
        run: docker build . --file Dockerfile-back --tag $DOCKER_USER/$DOCKER_REPO_NAME_BACK:${{ steps.date.outputs.date }}

      # Builder l'image du front
      - name: Build the Docker image FRONT # push The image to the docker hub
        run: docker build . --file Dockerfile-web --tag $DOCKER_USER/$DOCKER_REPO_NAME_FRONT:${{ steps.date.outputs.date }}

      # Pusher l'image du back sur dockerHub
      - name: Docker Push image BACK 
        run: docker push $DOCKER_USER/$DOCKER_REPO_NAME_BACK:${{ steps.date.outputs.date }}

      # Pusher l'image du front sur dockerHub
      - name: Docker Push image FRONT
        run: docker push $DOCKER_USER/$DOCKER_REPO_NAME_FRONT:${{ steps.date.outputs.date }}

      # Arreter le conteneur filter
      - name: Stop Docker Container FRONT and BACK
        run: docker stop $(docker ps --filter "ancestor=churn_finance_g2_c_p_m" --filter "ancestor=churn_finance_g2_back" --filter "ancestor=churn_finance_g2_front" -q)



# # Processus du pipeline CD
#   deploy:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#     - name: Deploy
#       env:
#           deploy_url: ${{ secrets.RENDER_DEPLOY_HOCK_URL }}
#       run: |
#         curl "$deploy_url"